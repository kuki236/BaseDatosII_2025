-- conectarse con user  system
CREATE TABLE REGIONS (
    REGION_ID NUMBER PRIMARY KEY,
    REGION_NAME VARCHAR2(25) NOT NULL
) TABLESPACE hr_tablespace;

CREATE TABLE COUNTRIES (
    COUNTRY_ID CHAR(2) PRIMARY KEY,
    COUNTRY_NAME VARCHAR2(40) NOT NULL,
    REGION_ID NUMBER,
    CONSTRAINT fk_countries_regions FOREIGN KEY (REGION_ID) REFERENCES REGIONS(REGION_ID)
) TABLESPACE hr_tablespace;

CREATE TABLE LOCATIONS (
    LOCATION_ID NUMBER(4) PRIMARY KEY,
    STREET_ADDRESS VARCHAR2(40),
    POSTAL_CODE VARCHAR2(12),
    CITY VARCHAR2(30) NOT NULL,
    STATE_PROVINCE VARCHAR2(25),
    COUNTRY_ID CHAR(2),
    CONSTRAINT fk_locations_countries FOREIGN KEY (COUNTRY_ID) REFERENCES COUNTRIES(COUNTRY_ID)
) TABLESPACE hr_tablespace;

CREATE TABLE DEPARTMENTS (
    DEPARTMENT_ID NUMBER(4) PRIMARY KEY,
    DEPARTMENT_NAME VARCHAR2(30) NOT NULL,
    MANAGER_ID NUMBER(6),
    LOCATION_ID NUMBER(4),
    CONSTRAINT fk_departments_locations FOREIGN KEY (LOCATION_ID) REFERENCES LOCATIONS(LOCATION_ID)
) TABLESPACE hr_tablespace;

CREATE TABLE JOBS (
    JOB_ID VARCHAR2(10) PRIMARY KEY,
    JOB_TITLE VARCHAR2(35) NOT NULL,
    MIN_SALARY NUMBER(6),
    MAX_SALARY NUMBER(6)
) TABLESPACE hr_tablespace;

CREATE TABLE EMPLOYEES (
    EMPLOYEE_ID NUMBER(6) PRIMARY KEY,
    FIRST_NAME VARCHAR2(20),
    LAST_NAME VARCHAR2(25) NOT NULL,
    EMAIL VARCHAR2(25) NOT NULL UNIQUE,
    PHONE_NUMBER VARCHAR2(20),
    HIRE_DATE DATE NOT NULL,
    JOB_ID VARCHAR2(10) NOT NULL,
    SALARY NUMBER(8,2) NOT NULL,
    COMMISSION_PCT NUMBER(2,2),
    MANAGER_ID NUMBER(6),
    DEPARTMENT_ID NUMBER(4),
    CONSTRAINT fk_employees_jobs FOREIGN KEY (JOB_ID) REFERENCES JOBS(JOB_ID),
    CONSTRAINT fk_employees_departments FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID),
    CONSTRAINT fk_employees_manager FOREIGN KEY (MANAGER_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
) TABLESPACE hr_tablespace;

ALTER TABLE DEPARTMENTS ADD CONSTRAINT fk_departments_manager FOREIGN KEY (MANAGER_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID);

CREATE TABLE JOB_HISTORY (
    EMPLOYEE_ID NUMBER(6),
    START_DATE DATE,
    END_DATE DATE NOT NULL,
    JOB_ID VARCHAR2(10) NOT NULL,
    DEPARTMENT_ID NUMBER(4),
    CONSTRAINT pk_job_history PRIMARY KEY (EMPLOYEE_ID, START_DATE),
    CONSTRAINT fk_job_history_employee FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID),
    CONSTRAINT fk_job_history_job FOREIGN KEY (JOB_ID) REFERENCES JOBS(JOB_ID),
    CONSTRAINT fk_job_history_department FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID)
) TABLESPACE hr_tablespace;

CREATE TABLE HORARIO (
    DIA_SEMANA VARCHAR2(10),
    TURNO VARCHAR2(10),
    HORA_INICIO TIMESTAMP,
    HORA_TERMINO TIMESTAMP,
    CONSTRAINT pk_horario PRIMARY KEY (DIA_SEMANA, TURNO),
    CONSTRAINT chk_dia_semana CHECK (DIA_SEMANA IN ('Lunes', 'Martes', 'Miercoles', 'Jueves', 'Viernes', 'Sabado', 'Domingo')),
    CONSTRAINT chk_turno CHECK (TURNO IN ('Mañana', 'Tarde', 'Noche'))
) TABLESPACE hr_tablespace;

CREATE TABLE EMPLEADO_HORARIO (
    DIA_SEMANA VARCHAR2(10),
    TURNO VARCHAR2(10),
    EMPLOYEE_ID NUMBER(6),
    CONSTRAINT pk_empleado_horario PRIMARY KEY (DIA_SEMANA, TURNO, EMPLOYEE_ID),
    CONSTRAINT fk_emp_horario_horario FOREIGN KEY (DIA_SEMANA, TURNO) REFERENCES HORARIO(DIA_SEMANA, TURNO),
    CONSTRAINT fk_emp_horario_employee FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
) TABLESPACE hr_tablespace;

CREATE TABLE ASISTENCIA_EMPLEADO (
    EMPLOYEE_ID NUMBER(6),
    DIA_SEMANA VARCHAR2(10),
    FECHA_REAL DATE,
    HORA_INICIO_REAL TIMESTAMP,
    HORA_TERMINO_REAL TIMESTAMP,
    CONSTRAINT pk_asistencia PRIMARY KEY (EMPLOYEE_ID, FECHA_REAL),
    CONSTRAINT fk_asistencia_employee FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
) TABLESPACE hr_tablespace;

CREATE TABLE CAPACITACION (
    CODIGO_CAPACITACION NUMBER PRIMARY KEY,
    NOMBRE_CAPACITACION VARCHAR2(100) NOT NULL,
    HORAS_CAPACITACION NUMBER NOT NULL,
    DESCRIPCION_CAPACITACION VARCHAR2(200)
) TABLESPACE hr_tablespace;

CREATE TABLE EMPLEADO_CAPACITACION (
    EMPLOYEE_ID NUMBER(6),
    CODIGO_CAPACITACION NUMBER,
    CONSTRAINT pk_empleado_capacitacion PRIMARY KEY (EMPLOYEE_ID, CODIGO_CAPACITACION),
    CONSTRAINT fk_emp_cap_employee FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID),
    CONSTRAINT fk_emp_cap_capacitacion FOREIGN KEY (CODIGO_CAPACITACION) REFERENCES CAPACITACION(CODIGO_CAPACITACION)
) TABLESPACE hr_tablespace;

CREATE TABLE ASISTENCIA_RECHAZADA (
    EMPLOYEE_ID NUMBER(6),
    DIA_SEMANA VARCHAR2(10),
    FECHA_REAL DATE,
    HORA_INICIO_REAL TIMESTAMP,
    HORA_TERMINO_REAL TIMESTAMP,
    HORA_PROGRAMADA TIMESTAMP,
    MOTIVO_RECHAZO VARCHAR2(200),
    FECHA_REGISTRO TIMESTAMP DEFAULT SYSTIMESTAMP
) TABLESPACE hr_tablespace;

-- Insertar datos de prueba
INSERT INTO REGIONS VALUES (1, 'Europe');
INSERT INTO REGIONS VALUES (2, 'Americas');
INSERT INTO REGIONS VALUES (3, 'Asia');
INSERT INTO REGIONS VALUES (4, 'Middle East and Africa');

INSERT INTO COUNTRIES VALUES ('US', 'United States of America', 2);
INSERT INTO COUNTRIES VALUES ('CA', 'Canada', 2);
INSERT INTO COUNTRIES VALUES ('UK', 'United Kingdom', 1);
INSERT INTO COUNTRIES VALUES ('DE', 'Germany', 1);
INSERT INTO COUNTRIES VALUES ('JP', 'Japan', 3);

INSERT INTO LOCATIONS VALUES (1400, '2014 Jabberwocky Rd', '26192', 'Southlake', 'Texas', 'US');
INSERT INTO LOCATIONS VALUES (1500, '2011 Interiors Blvd', '99236', 'South San Francisco', 'California', 'US');
INSERT INTO LOCATIONS VALUES (1700, '2004 Charade Rd', '98199', 'Seattle', 'Washington', 'US');
INSERT INTO LOCATIONS VALUES (1800, '147 Spadina Ave', 'M5V 2L7', 'Toronto', 'Ontario', 'CA');
INSERT INTO LOCATIONS VALUES (2400, '8204 Arthur St', NULL, 'London', NULL, 'UK');

INSERT INTO JOBS VALUES ('AD_PRES', 'President', 20000, 40000);
INSERT INTO JOBS VALUES ('AD_VP', 'Administration Vice President', 15000, 30000);
INSERT INTO JOBS VALUES ('IT_PROG', 'Programmer', 4000, 10000);
INSERT INTO JOBS VALUES ('SA_REP', 'Sales Representative', 6000, 12000);
INSERT INTO JOBS VALUES ('ST_CLERK', 'Stock Clerk', 2000, 5000);

INSERT INTO EMPLOYEES VALUES (100, 'Steven', 'King', 'SKING', '515.123.4567', TO_DATE('2003-06-17', 'YYYY-MM-DD'), 'AD_PRES', 24000, NULL, NULL, NULL);
INSERT INTO EMPLOYEES VALUES (101, 'Neena', 'Kochhar', 'NKOCHHAR', '515.123.4568', TO_DATE('2005-09-21', 'YYYY-MM-DD'), 'AD_VP', 17000, NULL, 100, NULL);
INSERT INTO EMPLOYEES VALUES (102, 'Lex', 'De Haan', 'LDEHAAN', '515.123.4569', TO_DATE('2001-01-13', 'YYYY-MM-DD'), 'AD_VP', 17000, NULL, 100, NULL);
INSERT INTO EMPLOYEES VALUES (103, 'Alexander', 'Hunold', 'AHUNOLD', '590.423.4567', TO_DATE('2006-01-03', 'YYYY-MM-DD'), 'IT_PROG', 9000, NULL, 102, NULL);
INSERT INTO EMPLOYEES VALUES (104, 'Bruce', 'Ernst', 'BERNST', '590.423.4568', TO_DATE('2007-05-21', 'YYYY-MM-DD'), 'IT_PROG', 6000, NULL, 103, NULL);

INSERT INTO DEPARTMENTS VALUES (10, 'Administration', 100, 1700);
INSERT INTO DEPARTMENTS VALUES (20, 'Marketing', 101, 1800);
INSERT INTO DEPARTMENTS VALUES (50, 'Shipping', 102, 1500);
INSERT INTO DEPARTMENTS VALUES (60, 'IT', 103, 1400);
INSERT INTO DEPARTMENTS VALUES (80, 'Sales', 100, 2400);

UPDATE EMPLOYEES SET DEPARTMENT_ID = 10 WHERE EMPLOYEE_ID = 100;
UPDATE EMPLOYEES SET DEPARTMENT_ID = 20 WHERE EMPLOYEE_ID = 101;
UPDATE EMPLOYEES SET DEPARTMENT_ID = 60 WHERE EMPLOYEE_ID IN (102, 103, 104);

INSERT INTO JOB_HISTORY VALUES (102, TO_DATE('2001-01-13', 'YYYY-MM-DD'), TO_DATE('2006-07-24', 'YYYY-MM-DD'), 'IT_PROG', 60);
INSERT INTO JOB_HISTORY VALUES (101, TO_DATE('2005-09-21', 'YYYY-MM-DD'), TO_DATE('2007-03-27', 'YYYY-MM-DD'), 'SA_REP', 80);
INSERT INTO JOB_HISTORY VALUES (101, TO_DATE('2007-03-28', 'YYYY-MM-DD'), TO_DATE('2009-12-31', 'YYYY-MM-DD'), 'IT_PROG', 60);
INSERT INTO JOB_HISTORY VALUES (100, TO_DATE('2003-06-17', 'YYYY-MM-DD'), TO_DATE('2006-12-31', 'YYYY-MM-DD'), 'AD_VP', 10);

INSERT INTO HORARIO VALUES ('Lunes', 'Mañana', TO_TIMESTAMP('08:00:00', 'HH24:MI:SS'), TO_TIMESTAMP('16:00:00', 'HH24:MI:SS'));
INSERT INTO HORARIO VALUES ('Lunes', 'Tarde', TO_TIMESTAMP('14:00:00', 'HH24:MI:SS'), TO_TIMESTAMP('22:00:00', 'HH24:MI:SS'));
INSERT INTO HORARIO VALUES ('Martes', 'Mañana', TO_TIMESTAMP('08:00:00', 'HH24:MI:SS'), TO_TIMESTAMP('16:00:00', 'HH24:MI:SS'));
INSERT INTO HORARIO VALUES ('Martes', 'Tarde', TO_TIMESTAMP('14:00:00', 'HH24:MI:SS'), TO_TIMESTAMP('22:00:00', 'HH24:MI:SS'));
INSERT INTO HORARIO VALUES ('Miercoles', 'Mañana', TO_TIMESTAMP('08:00:00', 'HH24:MI:SS'), TO_TIMESTAMP('16:00:00', 'HH24:MI:SS'));
INSERT INTO HORARIO VALUES ('Miercoles', 'Tarde', TO_TIMESTAMP('14:00:00', 'HH24:MI:SS'), TO_TIMESTAMP('22:00:00', 'HH24:MI:SS'));
INSERT INTO HORARIO VALUES ('Jueves', 'Mañana', TO_TIMESTAMP('08:00:00', 'HH24:MI:SS'), TO_TIMESTAMP('16:00:00', 'HH24:MI:SS'));
INSERT INTO HORARIO VALUES ('Jueves', 'Tarde', TO_TIMESTAMP('14:00:00', 'HH24:MI:SS'), TO_TIMESTAMP('22:00:00', 'HH24:MI:SS'));
INSERT INTO HORARIO VALUES ('Viernes', 'Mañana', TO_TIMESTAMP('08:00:00', 'HH24:MI:SS'), TO_TIMESTAMP('16:00:00', 'HH24:MI:SS'));
INSERT INTO HORARIO VALUES ('Viernes', 'Tarde', TO_TIMESTAMP('14:00:00', 'HH24:MI:SS'), TO_TIMESTAMP('22:00:00', 'HH24:MI:SS'));

INSERT INTO EMPLEADO_HORARIO VALUES ('Lunes', 'Mañana', 100);
INSERT INTO EMPLEADO_HORARIO VALUES ('Martes', 'Mañana', 100);
INSERT INTO EMPLEADO_HORARIO VALUES ('Miercoles', 'Mañana', 100);
INSERT INTO EMPLEADO_HORARIO VALUES ('Jueves', 'Mañana', 100);
INSERT INTO EMPLEADO_HORARIO VALUES ('Viernes', 'Mañana', 100);
INSERT INTO EMPLEADO_HORARIO VALUES ('Lunes', 'Tarde', 101);
INSERT INTO EMPLEADO_HORARIO VALUES ('Martes', 'Tarde', 101);
INSERT INTO EMPLEADO_HORARIO VALUES ('Miercoles', 'Tarde', 101);
INSERT INTO EMPLEADO_HORARIO VALUES ('Jueves', 'Tarde', 101);
INSERT INTO EMPLEADO_HORARIO VALUES ('Viernes', 'Tarde', 101);

INSERT INTO CAPACITACION VALUES (1, 'Gestión de Proyectos con PMI', 40, 'Capacitación en metodologías de gestión de proyectos según el PMI');
INSERT INTO CAPACITACION VALUES (2, 'Liderazgo y Trabajo en Equipo', 20, 'Desarrollo de habilidades de liderazgo y gestión de equipos');
INSERT INTO CAPACITACION VALUES (3, 'Excel Avanzado', 16, 'Manejo avanzado de Excel: tablas dinámicas, macros y análisis de datos');
INSERT INTO CAPACITACION VALUES (4, 'Seguridad de la Información', 24, 'Principios de seguridad informática y protección de datos');
INSERT INTO CAPACITACION VALUES (5, 'Atención al Cliente', 12, 'Técnicas de atención y servicio al cliente');
INSERT INTO CAPACITACION VALUES (6, 'Programación en Python', 60, 'Curso completo de programación en Python desde básico hasta avanzado');
INSERT INTO CAPACITACION VALUES (7, 'Inteligencia Emocional', 16, 'Desarrollo de inteligencia emocional en el entorno laboral');
INSERT INTO CAPACITACION VALUES (8, 'Base de Datos Oracle', 48, 'Administración y programación en Oracle Database');
INSERT INTO CAPACITACION VALUES (9, 'Gestión del Tiempo', 8, 'Técnicas para mejorar la productividad y gestión del tiempo');
INSERT INTO CAPACITACION VALUES (10, 'Marketing Digital', 32, 'Estrategias de marketing digital y redes sociales');

INSERT INTO EMPLEADO_CAPACITACION VALUES (100, 1);
INSERT INTO EMPLEADO_CAPACITACION VALUES (100, 2);
INSERT INTO EMPLEADO_CAPACITACION VALUES (100, 9);
INSERT INTO EMPLEADO_CAPACITACION VALUES (101, 2);
INSERT INTO EMPLEADO_CAPACITACION VALUES (101, 5);
INSERT INTO EMPLEADO_CAPACITACION VALUES (101, 7);
INSERT INTO EMPLEADO_CAPACITACION VALUES (102, 6);
INSERT INTO EMPLEADO_CAPACITACION VALUES (102, 8);
INSERT INTO EMPLEADO_CAPACITACION VALUES (103, 3);
INSERT INTO EMPLEADO_CAPACITACION VALUES (103, 6);
INSERT INTO EMPLEADO_CAPACITACION VALUES (103, 8);
INSERT INTO EMPLEADO_CAPACITACION VALUES (104, 3);
INSERT INTO EMPLEADO_CAPACITACION VALUES (104, 4);
INSERT INTO EMPLEADO_CAPACITACION VALUES (104, 6);

COMMIT;

-- 3.2 Trigger para validar asistencia
CREATE OR REPLACE TRIGGER TRG_VALIDAR_ASISTENCIA_EMPLEADO
BEFORE INSERT OR UPDATE ON ASISTENCIA_EMPLEADO
FOR EACH ROW
DECLARE
    v_dia_semana_calculado VARCHAR2(10);
    v_hora_inicio_programada TIMESTAMP;
    v_hora_termino_programada TIMESTAMP;
    v_existe_horario NUMBER;
    v_turno VARCHAR2(10);
BEGIN
    v_dia_semana_calculado := CASE TO_CHAR(:NEW.FECHA_REAL, 'D')
        WHEN '2' THEN 'Lunes'
        WHEN '3' THEN 'Martes'
        WHEN '4' THEN 'Miercoles'
        WHEN '5' THEN 'Jueves'
        WHEN '6' THEN 'Viernes'
        WHEN '7' THEN 'Sabado'
        WHEN '1' THEN 'Domingo'
    END;
    
    IF v_dia_semana_calculado != :NEW.DIA_SEMANA THEN
        RAISE_APPLICATION_ERROR(-20001, 'ERROR: El día de la semana no corresponde con la fecha real.');
    END IF;
    
    BEGIN
        SELECT COUNT(*), MIN(EH.TURNO)
        INTO v_existe_horario, v_turno
        FROM EMPLEADO_HORARIO EH
        WHERE EH.EMPLOYEE_ID = :NEW.EMPLOYEE_ID
        AND EH.DIA_SEMANA = :NEW.DIA_SEMANA;
        
        IF v_existe_horario = 0 THEN
            RAISE_APPLICATION_ERROR(-20002, 'ERROR: El empleado no tiene horario asignado para este día.');
        END IF;
        
        SELECT H.HORA_INICIO, H.HORA_TERMINO
        INTO v_hora_inicio_programada, v_hora_termino_programada
        FROM HORARIO H
        WHERE H.DIA_SEMANA = :NEW.DIA_SEMANA
        AND H.TURNO = v_turno;
        
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20003, 'ERROR: No se encontró horario programado.');
    END;
    
    IF TO_CHAR(:NEW.HORA_INICIO_REAL, 'HH24:MI') < TO_CHAR(v_hora_inicio_programada - INTERVAL '1' HOUR, 'HH24:MI') OR
       TO_CHAR(:NEW.HORA_INICIO_REAL, 'HH24:MI') > TO_CHAR(v_hora_inicio_programada + INTERVAL '2' HOUR, 'HH24:MI') THEN
        RAISE_APPLICATION_ERROR(-20004, 'ERROR: La hora de inicio está muy alejada de la programada.');
    END IF;
    
    IF :NEW.HORA_INICIO_REAL >= :NEW.HORA_TERMINO_REAL THEN
        RAISE_APPLICATION_ERROR(-20006, 'ERROR: La hora de inicio debe ser menor que la hora de término.');
    END IF;
END;
/

-- 3.3 Trigger para validar salario
CREATE OR REPLACE TRIGGER TRG_VALIDAR_SALARIO_EMPLEADO
BEFORE INSERT OR UPDATE OF SALARY, JOB_ID ON EMPLOYEES
FOR EACH ROW
DECLARE
    v_min_salary NUMBER;
    v_max_salary NUMBER;
    v_job_title VARCHAR2(35);
BEGIN
    SELECT MIN_SALARY, MAX_SALARY, JOB_TITLE
    INTO v_min_salary, v_max_salary, v_job_title
    FROM JOBS
    WHERE JOB_ID = :NEW.JOB_ID;
    
    IF :NEW.SALARY < v_min_salary THEN
        RAISE_APPLICATION_ERROR(-20011, 'ERROR: El salario es menor al mínimo permitido.');
    END IF;
    
    IF :NEW.SALARY > v_max_salary THEN
        RAISE_APPLICATION_ERROR(-20012, 'ERROR: El salario es mayor al máximo permitido.');
    END IF;
END;
/

-- 3.4 Trigger para validar hora de ingreso
CREATE OR REPLACE TRIGGER TRG_VALIDAR_HORA_INGRESO
BEFORE INSERT ON ASISTENCIA_EMPLEADO
FOR EACH ROW
DECLARE
    v_hora_inicio_programada TIMESTAMP;
    v_turno VARCHAR2(10);
    v_hora_inicio_limite_min TIMESTAMP;
    v_hora_inicio_limite_max TIMESTAMP;
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    BEGIN
        SELECT MIN(EH.TURNO)
        INTO v_turno
        FROM EMPLEADO_HORARIO EH
        WHERE EH.EMPLOYEE_ID = :NEW.EMPLOYEE_ID
        AND EH.DIA_SEMANA = :NEW.DIA_SEMANA;
        
        SELECT H.HORA_INICIO
        INTO v_hora_inicio_programada
        FROM HORARIO H
        WHERE H.DIA_SEMANA = :NEW.DIA_SEMANA
        AND H.TURNO = v_turno;
        
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            INSERT INTO ASISTENCIA_RECHAZADA (
                EMPLOYEE_ID, DIA_SEMANA, FECHA_REAL, HORA_INICIO_REAL, 
                HORA_TERMINO_REAL, HORA_PROGRAMADA, MOTIVO_RECHAZO
            ) VALUES (
                :NEW.EMPLOYEE_ID, :NEW.DIA_SEMANA, :NEW.FECHA_REAL, 
                :NEW.HORA_INICIO_REAL, :NEW.HORA_TERMINO_REAL, NULL,
                'No tiene horario asignado'
            );
            COMMIT;
            RAISE_APPLICATION_ERROR(-20020, 'Registro exitoso. Gracias por registrar su asistencia.');
    END;
    
    v_hora_inicio_limite_min := v_hora_inicio_programada - INTERVAL '30' MINUTE;
    v_hora_inicio_limite_max := v_hora_inicio_programada + INTERVAL '30' MINUTE;
    
    IF :NEW.HORA_INICIO_REAL < v_hora_inicio_limite_min OR :NEW.HORA_INICIO_REAL > v_hora_inicio_limite_max THEN
        INSERT INTO ASISTENCIA_RECHAZADA (
            EMPLOYEE_ID, DIA_SEMANA, FECHA_REAL, HORA_INICIO_REAL, 
            HORA_TERMINO_REAL, HORA_PROGRAMADA, MOTIVO_RECHAZO
        ) VALUES (
            :NEW.EMPLOYEE_ID, :NEW.DIA_SEMANA, :NEW.FECHA_REAL, 
            :NEW.HORA_INICIO_REAL, :NEW.HORA_TERMINO_REAL, v_hora_inicio_programada,
            'Fuera del rango permitido (+/- 30 minutos)'
        );
        COMMIT;
        RAISE_APPLICATION_ERROR(-20020, 'Registro exitoso. Gracias por registrar su asistencia.');
    END IF;
END;
/

SELECT 'Triggers creados exitosamente' AS MENSAJE FROM DUAL;